/**
                                    ‚£Ä‚°†‚¢§‚°Ä          
                                 ‚¢Ä‚°¥‚†ü‚†É  ‚†ô‚£Ñ         
                                ‚£†‚†ã      ‚†ò‚£Ü        
                              ‚¢†‚†æ‚¢õ‚†í       ‚¢∏‚°Ü       
                              ‚£ø‚£∂‚£Ñ‚°à‚†ì‚¢Ñ‚††‚°Ä   ‚£Ñ‚£∑       
                             ‚¢Ä‚£ø‚£∑ ‚†à‚†±‚°Ñ‚†ë‚£å‚†Ü  ‚°ú‚¢ª       
                             ‚¢∏‚£ø‚°ø‚†≥‚°Ü‚†ê‚¢ø‚£Ü‚†à‚¢ø  ‚°á‚†ò‚°Ü      
                              ‚¢ø‚£ø‚£∑‚°á  ‚†à‚¢Ü‚†à‚†Ü‚¢∏  ‚¢£      
                              ‚†ò‚£ø‚£ø‚£ø‚£ß  ‚†à‚¢Ç ‚°á  ‚¢®‚†ì‚£Ñ    
                               ‚£∏‚£ø‚£ø‚£ø‚£¶‚£§‚†ñ‚°è‚°∏ ‚£Ä‚°¥‚†ã ‚†à‚†¢‚°Ä  
                             ‚¢†‚£æ‚†Å‚£π‚£ø‚£ø‚£ø‚£∑‚£æ‚†Ω‚†ñ‚†ä‚¢π‚£Ä‚†Ñ   ‚†à‚¢£‚°Ä
                             ‚°ü‚£á‚£∞‚¢´‚¢ª‚¢â‚†â ‚£ø‚°Ü  ‚°∏‚°è      ‚¢á
                            ‚¢®‚°á‚°á‚†à‚¢∏‚¢∏‚¢∏  ‚°á‚°á  ‚†Å‚†ª‚°Ñ‚°†‚†Ç   ‚†ò
‚¢§‚£Ñ                         ‚¢†‚†õ‚†ì‚°á ‚†∏‚°Ü‚¢∏ ‚¢†‚£ø    ‚£∞‚£ø‚£µ‚°Ü    
‚†à‚¢ª‚£∑‚£¶‚£Ä                     ‚£†‚°ø‚£¶‚£Ä‚°á ‚¢ß‚°á  ‚¢∫‚°ü   ‚¢∞‚†â‚£∞‚†ü‚†ä‚£†‚†Ç ‚°∏
  ‚¢ª‚£ø‚£ø‚£∑‚£¶‚£Ä                 ‚£†‚¢ß‚°ô‚†∫‚†ø‚°á ‚†ò‚†á  ‚¢∏‚£ß  ‚¢†‚†É‚£æ‚£å‚†â‚†©‚†≠‚†ç‚£â‚°á
   ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä            ‚£†‚£û‚£ã ‚†à ‚°≥‚£ß     ‚¢∏‚°è  ‚°û‚¢∞‚†â‚†â‚†â‚†â‚†â‚†ì‚¢ª‚†É
    ‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ  ‚¢Ä‚£Ä‚††‚†§‚£§‚£§‚†§‚†û‚†ì‚¢†‚†à‚°Ü ‚¢£‚£∏‚£æ‚†Ü     ‚¢Ä‚£Ä‚°º‚†Å‚°ø‚†à‚£â‚£â‚£í‚°í‚†¢‚°º 
     ‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£é‚£Ω‚£∂‚£§‚°∂‚¢ã‚£§‚†É‚£†‚°¶‚¢Ä‚°º‚¢¶‚£æ‚°§‚†ö‚£ü‚£Å‚£Ä‚£Ä‚£Ä‚£Ä ‚£Ä‚£à‚£Ä‚£†‚£æ‚£Ö ‚†ë‚†Ç‚†§‚†å‚£©‚°á 
      ‚†ò‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Å‚£∫‚¢Å‚£û‚£â‚°¥‚†ü‚°Ä   ‚†Å‚†∏‚°Ö ‚†à‚¢∑‚†à‚†è‚†ô ‚¢π‚°õ ‚¢â   ‚£Ä‚£Ä‚£º‚°á 
        ‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ω‚£ø‚°ü‚¢°‚†ñ‚£°‚°¥‚†Ç‚£Ä‚£Ä‚£Ä‚£∞‚£Å‚£Ä‚£Ä‚£∏    ‚†à‚†Å  ‚†à ‚£†‚†ú‚†ã‚£†‚†Å 
           ‚†ô‚¢ø‚£ø‚£ø‚£ø‚°ü‚¢ø‚£ø‚£ø‚£∑‚°ü‚¢ã‚£•‚£ñ‚£â ‚†à‚¢Å‚°Ä‚†§‚†ö‚†ø‚£∑‚°¶‚¢Ä‚£†‚£Ä‚†¢‚£Ñ‚£Ä‚°†‚†î‚†ã‚†Å ‚£º‚†É  
             ‚†à‚†ª‚£ø‚£ø‚°Ñ‚†à‚†ª‚£ø‚£ø‚¢ø‚£õ‚£©‚†§‚†í‚†â‚†Å     ‚†â‚†í‚¢§‚°Ä‚†â‚†Å     ‚¢Ä‚°ø   
               ‚†à‚†ô‚¢ø‚£§‚£§‚†¥‚†ü‚†ã‚†â             ‚†à‚†ë‚†§     ‚¢©‚†á   
                  ‚†à                               


**/
  const { cmd } = require('../command');
const axios = require('axios');

cmd({
  pattern: "xvideo",
  alias: ["xv", "xvideos"],
  react: "üîû",
  desc: "Search & download Xvideos video with reply quality selection",
  category: "fun",
  use: ".xvideo <search term>",
  filename: __filename
}, async (conn, mek, m, { text, from, reply }) => {
  try {
    if (!text) return reply("üîç *Please enter a search term!*\n\n_Example:_ .xvideo Indian girl");

    // üîé Search video
    const search = await axios.get(`https://api.nekolabs.my.id/discovery/xvideos/search?q=${encodeURIComponent(text)}`);
    if (!search.data.success || !search.data.result?.length) return reply("‚ö†Ô∏è *No results found!* üò¢");

    let list = "üîû XVIDEOS SEARCH RESULTS\n\n";
    search.data.result.forEach((vid, i) => {
      list += `*\`${i+1}\` | ${vid.title || "No title"}*\n`;
    });

    const listMsg = await conn.sendMessage(from, { text: list + "\nüî¢ *Reply with the number to choose a video.*" }, { quoted: mek });
    const listMsgId = listMsg.key.id;

    conn.ev.on("messages.upsert", async (update) => {
      const msg = update?.messages?.[0];
      if (!msg?.message) return;

      const textReply = msg.message?.conversation || msg.message?.extendedTextMessage?.text;
      const isReplyToList = msg?.message?.extendedTextMessage?.contextInfo?.stanzaId === listMsgId;
      if (!isReplyToList) return;

      const index = parseInt(textReply.trim()) - 1;
      if (isNaN(index) || index < 0 || index >= search.data.result.length) return reply("‚ùå *Invalid number!*");

      const chosen = search.data.result[index];

      // üß© Download video
      const dl = await axios.get(`https://api.nekolabs.my.id/downloader/xvideos?url=${encodeURIComponent(chosen.url)}`);
      if (!dl.data.success) return reply("‚ö†Ô∏è *Error fetching video!* üò¢");

      const infoMap = dl.data.result;
      const thumb = infoMap.thumb;
      const low = infoMap.videos.low;
      const high = infoMap.videos.high;

      // Ask quality
      const askQuality = await conn.sendMessage(from, {
        image: { url: thumb },
        caption: `*üé¨ XVIDEOS INFO*\n\n*Title:* ${infoMap.title}\n*Duration:* ${infoMap.duration}\n\n*Reply below number:*\n1 | High quality\n2 | Low quality`
      }, { quoted: msg });

      const qualityMsgId = askQuality.key.id;

      conn.ev.on("messages.upsert", async (qUpdate) => {
        const qMsg = qUpdate?.messages?.[0];
        if (!qMsg?.message) return;

        const qText = qMsg.message?.conversation || qMsg.message?.extendedTextMessage?.text;
        const isReplyToQuality = qMsg?.message?.extendedTextMessage?.contextInfo?.stanzaId === qualityMsgId;
        if (!isReplyToQuality) return;

        if (qText.trim() === "1") {
          await conn.sendMessage(from, { video: { url: high }, caption: `üé• High quality video\n${infoMap.title}` }, { quoted: qMsg });
        } else if (qText.trim() === "2") {
          await conn.sendMessage(from, { video: { url: low }, caption: `üé• Low quality video\n${infoMap.title}` }, { quoted: qMsg });
        } else {
          await conn.sendMessage(from, { text: "‚ùå Invalid input. Reply 1 for high / 2 for low quality." }, { quoted: qMsg });
        }
      });
    });

  } catch (e) {
    console.error(e);
    await reply("‚ö†Ô∏è *Something went wrong while fetching Xvideos video!* üò¢");
  }
});
